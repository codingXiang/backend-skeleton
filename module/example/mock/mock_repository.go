// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	model "github.com/codingXiang/backend-skeleton/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateDepartment mocks base method
func (m *MockRepository) CreateDepartment(data model.DepartmentInterface) (*model.Department, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDepartment", data)
	ret0, _ := ret[0].(*model.Department)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDepartment indicates an expected call of CreateDepartment
func (mr *MockRepositoryMockRecorder) CreateDepartment(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDepartment", reflect.TypeOf((*MockRepository)(nil).CreateDepartment), data)
}

// CreateUser mocks base method
func (m *MockRepository) CreateUser(data model.UserInterface) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", data)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockRepositoryMockRecorder) CreateUser(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), data)
}

// GetDepartmentList mocks base method
func (m *MockRepository) GetDepartmentList() ([]*model.Department, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDepartmentList")
	ret0, _ := ret[0].([]*model.Department)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDepartmentList indicates an expected call of GetDepartmentList
func (mr *MockRepositoryMockRecorder) GetDepartmentList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepartmentList", reflect.TypeOf((*MockRepository)(nil).GetDepartmentList))
}

// GetDepartment mocks base method
func (m *MockRepository) GetDepartment(data model.DepartmentInterface) (*model.Department, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDepartment", data)
	ret0, _ := ret[0].(*model.Department)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDepartment indicates an expected call of GetDepartment
func (mr *MockRepositoryMockRecorder) GetDepartment(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepartment", reflect.TypeOf((*MockRepository)(nil).GetDepartment), data)
}

// GetUserList mocks base method
func (m *MockRepository) GetUserList() ([]*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserList")
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserList indicates an expected call of GetUserList
func (mr *MockRepositoryMockRecorder) GetUserList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserList", reflect.TypeOf((*MockRepository)(nil).GetUserList))
}

// GetUser mocks base method
func (m *MockRepository) GetUser(data model.UserInterface) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", data)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockRepositoryMockRecorder) GetUser(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockRepository)(nil).GetUser), data)
}

// ModifyDepartment mocks base method
func (m *MockRepository) ModifyDepartment(data model.DepartmentInterface) (*model.Department, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyDepartment", data)
	ret0, _ := ret[0].(*model.Department)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyDepartment indicates an expected call of ModifyDepartment
func (mr *MockRepositoryMockRecorder) ModifyDepartment(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyDepartment", reflect.TypeOf((*MockRepository)(nil).ModifyDepartment), data)
}

// ModifyUser mocks base method
func (m *MockRepository) ModifyUser(data model.UserInterface) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyUser", data)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyUser indicates an expected call of ModifyUser
func (mr *MockRepositoryMockRecorder) ModifyUser(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyUser", reflect.TypeOf((*MockRepository)(nil).ModifyUser), data)
}

// DeleteDepartment mocks base method
func (m *MockRepository) DeleteDepartment(data model.DepartmentInterface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDepartment", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDepartment indicates an expected call of DeleteDepartment
func (mr *MockRepositoryMockRecorder) DeleteDepartment(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDepartment", reflect.TypeOf((*MockRepository)(nil).DeleteDepartment), data)
}

// DeleteUser mocks base method
func (m *MockRepository) DeleteUser(data model.UserInterface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockRepositoryMockRecorder) DeleteUser(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockRepository)(nil).DeleteUser), data)
}
